/*    https://leetcode.com/problems/3sum/    */



/*  Brute code  */
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        Set<List<Integer>> set = new HashSet<>();
        int n = nums.length;
        Arrays.sort(nums);

        for(int i = 0; i<n; i++){
            for(int j = i+1; j<n; j++){
                for(int k = j+1; k<n; k++){
                    int sum = nums[i] + nums[j] + nums[k];

                    if(sum==0){
                        List<Integer> num = new ArrayList<>();
                        num.add(nums[i]);
                        num.add(nums[j]);
                        num.add(nums[k]);
                        if(!set.contains(num)){
                            set.add(num);
                        }
                    }
                }
            }
        }
        for(List<Integer> x : set){
            list.add(x);
        }
        return list;
    }
}



/*     Final Solution    */

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        Set<List<Integer>> set = new HashSet<>();
        int n = nums.length;
        Arrays.sort(nums);

        for(int i = 0; i<n; i++){
            int j = i+1;
            int k = n-1;

            while(j<k){
                int sum = nums[i] + nums[j] + nums[k];

                if(sum==0){
                    List<Integer> num = new ArrayList<>();
                    num.add(nums[i]);
                    num.add(nums[j]);
                    num.add(nums[k]);
                        

                    set.add(num);
                    j++;
                    k--;
                }else if(sum<0){
                    j++;
                }else{
                    k--;
                }
            }
        }
        for(List<Integer> x : set){
            list.add(x);
        }
        return list;
    }
}


/*   fully optimised     */
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        //Set<List<Integer>> set = new HashSet<>();
        int n = nums.length;
        Arrays.sort(nums);

        if(nums.length < 3){
            return list;
        }

        for(int i = 0; i<n; i++){
            //if 1st sum value is +ve in sorted arrays then it cannot be = 0 
            if(nums[i] > 0){
                break;
            }

            //removing duplicate value
            if(i>0 && nums[i]==nums[i-1]){
                continue;
            }
            int j = i+1;
            int k = n-1;

            while(j<k){
                int sum = nums[i] + nums[j] + nums[k];

                if(sum==0){
                    list.add(Arrays.asList(nums[i],nums[j],nums[k]));
                        

                    int lastLowOccurrence = nums[j];
                    int lastHighOccurrence = nums[k];
                    
                    //removing duplicate value
                    while (j < k && nums[j] == lastLowOccurrence) {
                        j++;
                    }
                    
                    //removing duplicate value
                    while (j < k && nums[k] == lastHighOccurrence) {
                        k--;
                    }
                }else if(sum<0){
                    j++;
                }else{
                    k--;
                }
            }
        }
        
        return list;
    }
}
