class Solution {
    public String longestPalindrome(String s) {
        if(s.length() < 2) return s;

        int len = 1;
        String ans = s.charAt(0) + "";// this save base ans with the length of string 1 if we get bigger than this then we update

        int n = s.length();
        boolean[][] check = new boolean[n][n];
        for(int gap = 0; gap < n; gap++){
            for(int i = 0, j = gap; j < n; i++,j++){
                if(gap == 0){
                    check[i][j] = true;
                }else if(gap == 1){
                    check[i][j] = s.charAt(i) == s.charAt(j); 
                }else{
                    check[i][j] = (s.charAt(i) == s.charAt(j) && check[i+1][j-1]);
                }
                if(check[i][j]){
                    if((gap+1) > len){
                        len = gap;
                        ans = s.substring(i,j+1);
                    }
                }
            }
        }

        return ans;
    }
}




// class Solution {
//     public String longestPalindrome(String s) {

//         int start = 0 , end = 0; //starting and ending of string which is palindrome
//         for(int i=0;i<s.length();i++){
//             int len1 = expandFromCentre(s,i,i+1);this check for even 
//             int len2 = expandFromCentre(s,i,i);this for odd
//             int len = Math.max(len1,len2);
//             if(end-start<len){//this check for whether we get the big sie of palindromic string or not if yes then add their strt nd end point
//                 start=i-(len-1)/2;
//                 end=i+len/2;
//             }
//         }
//         return s.substring(start,end+1);    
//     }
//     int expandFromCentre(String s, int i,int j){
//         while(i>=0 && j<s.length() && s.charAt(i)==s.charAt(j)){
//             i--;
//             j++;
//         }
//         return j-i-1;
//         }
//     }
