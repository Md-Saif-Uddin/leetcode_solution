/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        if(head == null && head.next == null) return;

        ListNode midHead = findMid(head);
        ListNode hs = reversing(midHead);
        ListNode hf = head;

        while(hf != null && hs != null){
            ListNode temp = hf.next;
            hf.next = hs;
            hf = temp;

            temp = hs.next;
            hs.next = hf;
            hs = temp;
        }

        if(hf != null) hf.next = null;
    }

    public ListNode findMid(ListNode node){
        ListNode oneJump = node;
        ListNode doubleJump = node;

        while(doubleJump != null && doubleJump.next != null){
            oneJump = oneJump.next;
            doubleJump = doubleJump.next.next;
        }

        return oneJump;
    }

    public ListNode reversing(ListNode curr){
        ListNode prev = null;
        ListNode next = curr.next;

        //base condition for size < 2
        if(curr == null || curr.next == null) return curr;

        while(curr != null){
            curr.next = prev;
            prev = curr;
            curr = next;
            if(next != null) next = next.next;
        }
        return prev;
    }
}
