//  https://leetcode.com/problems/contains-duplicate-ii/  
//2 types 2nd is easy to understand for me 


// Time Complexity : O(n)
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        // Base case...
        if(nums == null || nums.length < 2 || k == 0)
            return false;
        int i = 0;
        // Create a Hash Set for storing previous of k elements...
        HashSet<Integer> hset = new HashSet<Integer>();
        // Traverse for all elements of the given array in a for loop...
        for(int j = 0; j < nums.length; j++) {
            // If duplicate element is present at distance less than equal to k, return true...
            if(!hset.add(nums[j])){
                return true;
            }
            // If size of the Hash Set becomes greater than k...
            if(hset.size() >= k+1){
                // Remove the last visited element from the set...
                hset.remove(nums[i]);
                i++;
            }
        }
        // If no duplicate element is found then return false...
        return false;
    }
}







class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        HashMap<Integer,Integer> map = new HashMap<>();

        for(int i = 0; i < nums.length; i++){

            //if key isn't in the map then add it with index for (i-j)<=k  check...
            if(!map.containsKey(nums[i])){
                map.put(nums[i],i);
            }else{
                //here we get index of same index value 
                int prevIndex = map.get(nums[i]);
                
                if(Math.abs(prevIndex - i) <= k){
                    return true;
                }else{
                    map.put(nums[i],i);
                }
            }
        }
        return false;
    }
}
