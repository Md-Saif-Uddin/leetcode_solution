/*  https://leetcode.com/problems/max-number-of-k-sum-pairs/description/?envType=study-plan-v2&envId=leetcode-75  */


class Solution {
    public int maxOperations(int[] nums, int k) {
        if(nums.length < 2 || k < 1) return 0;

        int count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        
        for(int i = 0; i < nums.length; i++) {
            int temp = k - nums[i];

            if(map.containsKey(temp)) {
                count++;

                if(map.get(temp) == 1) {
                    map.remove(temp);
                }
                else {
                    map.put(temp, map.get(temp) - 1);
                }
            }
            else {
                map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
            }
        }
        
        return count;
    }
}



// class Solution {
//     public int maxOperations(int[] nums, int k) {
//         Arrays.sort(nums);
//         int count=0;
//         int left=0;
//         int right=nums.length-1;

//         while(left<right){
//             int sum = nums[left]+nums[right];
//             if(sum==k){
//                 count++;
//                 left++;
//                 right--;
//             }else if(sum<k){
//                 left++;
//             }else{
//                 right--;
//             }
//         }

//         return count;
        
//     }
// }
